create table DEPT(DEPTNO int(2), DNAME varchar(15), LOC varchar(10));

insert into DEPT values(10,'ACCOUNTING','NEW YORK'),
(20,'RESEARCH','DALLAS'),
(30,'SALES','CHICAGO'),
(40,'OPERATIONS','BOSTON');

select * from DEPT;
=========================================================================================================
Create Table EMP(EMPNO int(4), ENAME varchar(10), JOB varchar(9), HIREDATE date, SAL float(7,2),COMM float(7,2),DEPTNO int(2));
Insert into EMP values (7839,'KING', 'MANAGER','1991-11-17',5000, NULL, 10),
(7698,'BLAKE', 'CLERK','1981-05-01',2850, NULL, 30),
(7782,'CLARK','MANAGER','1981-06-09',2450,NULL,10),
(7566, 'JONES' ,'CLERK' ,'1981-04-02' ,2975 ,NULL,20),
(7654 ,'MARTIN','SALESMAN','1981-09-28', 1250 ,1400, 30),
(7499,'ALLEN','SALESMAN','1981-02-20',1600, 300 ,30);

select* from EMP;
=========================================================================================================
-- 3. Display all the employees where SAL between 2500 and 5000 (inclusive of both).
select ENAME from EMP where sal between 2500 and 5000;
=========================================================================================================
-- 4. Display all the ENAMEs in descending order of ENAME.
select ENAME from EMP Order by Ename desc;
=========================================================================================================
-- 5. Display all the JOBs in lowercase.
select lower(JOB) from EMP; 
=========================================================================================================
-- 6. Display the ENAMEs and the lengths of the ENAMEs.
select ENAME, length(Ename) from EMP;
=========================================================================================================
-- 7. Display the DEPTNO and the count of employees who belong to that DEPTNO .
select deptno, count(ename ) from EMP group by deptno;
=========================================================================================================
-- 8. Display the DNAMEs and the ENAMEs who belong to that DNAME.
select DNAME,ENAME from EMP, DEPT where EMP.DEPTNO = DEPT.DEPTNO;
=========================================================================================================
-- 9. Display the position at which the string ‘AR’ occurs in the ename.
select INSTR(ENAME,'AR') from EMP;
=========================================================================================================
-- 10. Display the HRA for each employee given that HRA is 20% of SAL
select ENAME, sal* 20/100 as HRA from EMP;

=========================================================================================================
Section II (10 marks)
/*
1. Write a stored procedure by the name of PROC1 that accepts two varchar strings
as parameters. Your procedure should then determine if the first varchar string 
exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 = 
‘CDAC, then string1 exists inside string2. The stored procedure should insert the 
appropriate message into a suitable TEMPP output table. Calling program for the 
stored procedure need not be written.

*/
=========================================================================================================
-- create table TEMPP(String1 varchar(10), String2 varchar(10), RESULT varchar (10));

create table TEMPP(String1 varchar (10), String2 varchar(10), output varchar(30));

delimiter //
create Procedure PROC1(str1 varchar(10), str2 varchar(10))
begin
	-- if (substr(str1) = substr(str2) ) then
    declare x int;
    set x = (instr(str2,str1));
    if x = 0 then
		insert into TEMPP values(str1, str2,'string1 is not present inside str2');
	else
		-- insert into TEMPP values(str1, str2, x);
        insert into TEMPP values(str1, str2,'string1 is present inside str2');
	end if;
end; //
delimiter ;

call PROC1('DAC','CDAC');
call PROC1('Shr', 'hrt');

select * from TEMPP;
=========================================================================================================


/*
2. Create a stored function by the name of FUNC1 to take three parameters, the 
sides of a triangle. The function should return a Boolean value:- TRUE if the 
triangle is valid, FALSE otherwise. A triangle is valid if the length of each side is 
less than the sum of the lengths of the other two sides. Check if the dimensions 
entered can form a valid triangle. Calling program for the stored function need not 
be written

*/

create table Triangle(side1 int, side2 int, side3 int, res char(5));

delimiter //
create function FUNC1(s1 int, s2 int, s3 int)
returns boolean
deterministic
begin
	if(s1+s2 > s3 and s1+ s3 > s2 and s2+ s3 > s1) then 
		-- insert into Triangle values(s1,s2,s3,TRUE);
        return true;
	else
		 -- insert into Triangle values(s1,s2,s3,FALSE);
       return false;
	end if;

end; //
delimiter ;

select FUNC1(3,2,2);
=========================================================================================================